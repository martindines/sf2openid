security:
    encoders:
        Symfony\Component\Security\Core\User\User: plaintext

    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    providers:
        # the order is important here
        openid_user_manager:
            id: acme.demo.openid_user_manager # the name of the service
        # keep your database provider below! it may look like this:
        database:
            entity: { class: AcmeDemoBundle:User, property: username }

    firewalls:

        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern:  ^/demo/secured/login$
            security: false

        #secured_area:
        #    pattern:    ^/demo/secured/
        #    form_login:
        #        check_path: _security_check
        #        login_path: _demo_login
        #    logout:
        #        path:   _demo_logout
        #        target: _demo

            #anonymous: ~
            #http_basic:
            #    realm: "Secured Demo Area"

        main:
            pattern:    ^/
            logout:       true
            anonymous:    true
            fp_openid:
                create_user_if_not_exists: true # so createUserFromIdentity method will be called
                provider: openid_user_manager # cf below

    #access_control:
        #- { path: ^/demo/secured/hello/admin/, roles: ROLE_ADMIN }

        #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }

    access_control:
        - { path: ^/login_openid$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/demo/secured, role: IS_AUTHENTICATED_OPENID }
        - { path: ^/demo/secured/hello/admin/, role: ROLE_ADMIN }